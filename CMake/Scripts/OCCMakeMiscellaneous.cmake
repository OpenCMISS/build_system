#[=======================================================================[.rst:
OpenCMISS CMake miscellaneous script
------------------------------------

All OpenCMISS CMake miscellaneous functions.

#]=======================================================================]

if(NOT WIN32)
  string(ASCII 27 _OC_ESCAPE)
  set(_OC_COLOUR_RESET        "${_OC_ESCAPE}[m")
  set(_OC_COLOUR_BOLD         "${_OC_ESCAPE}[1m")
  set(_OC_COLOUR_RED          "${_OC_ESCAPE}[31m")
  set(_OC_COLOUR_GREEN        "${_OC_ESCAPE}[32m")
  set(_OC_COLOUR_YELLOW       "${_OC_ESCAPE}[33m")
  set(_OC_COLOUR_BLUE         "${_OC_ESCAPE}[34m")
  set(_OC_COLOUR_MAGENTA      "${_OC_ESCAPE}[35m")
  set(_OC_COLOUR_CYAN         "${_OC_ESCAPE}[36m")
  set(_OC_COLOUR_WHITE        "${_OC_ESCAPE}[37m")
  set(_OC_COLOUR_BOLD_RED     "${_OC_ESCAPE}[1;31m")
  set(_OC_COLOUR_BOLD_GREEN   "${_OC_ESCAPE}[1;32m")
  set(_OC_COLOUR_BOLD_YELLOW  "${_OC_ESCAPE}[1;33m")
  set(_OC_COLOUR_BOLD_BLUE    "${_OC_ESCAPE}[1;34m")
  set(_OC_COLOUR_BOLD_MAGENTA "${_OC_ESCAPE}[1;35m")
  set(_OC_COLOUR_BOLD_CYAN    "${_OC_ESCAPE}[1;36m")
  set(_OC_COLOUR_BOLD_WHITE   "${_OC_ESCAPE}[1;37m")
endif()
  
function(OCCMakeMessage LEVEL MESSAGE)
  if(WIN32)
    set(_OC_MESSAGE "OpenCMISS: ")
  else()
    set(_OC_MESSAGE "${_OC_COLOUR_BOLD_YELLOW}OpenCMISS:${_OC_COLOUR_RESET} ")
  endif()
  string(APPEND _OC_MESSAGE ${MESSAGE})
  message(${LEVEL} ${_OC_MESSAGE})
  unset(_OC_MESSAGE)
endfunction()

function(OCCMakeFatalError MESSAGE)
  if(WIN32)
    set(_OC_MESSAGE "OpenCMISS FATAL ERROR: ")
  else()
    set(_OC_MESSAGE "${_OC_COLOUR_BOLD_RED}OpenCMISS FATAL ERROR:${_OC_COLOUR_RESET} ")
  endif()
  string(APPEND _OC_MESSAGE ${MESSAGE})
  message(FATAL_ERROR ${_OC_MESSAGE})
  unset(_OC_MESSAGE)
endfunction()

function(OCCMakeWarning MESSAGE)
  if(WIN32)
    set(_OC_MESSAGE "OpenCMISS WARNING: ")
  else()
    set(_OC_MESSAGE "${_OC_COLOUR_BOLD_CYAN}OpenCMISS WARNING:${_OC_COLOUR_RESET} ")
  endif()
  string(APPEND _OC_MESSAGE ${MESSAGE})
  message(WARNING ${_OC_MESSAGE})
  unset(_OC_MESSAGE)
endfunction()

function(OCCMakeDebug DEBUG_MESSAGE DEBUG_LEVEL)
  #if(OC_CMAKE_DEBUG)
  #  if(DEBUG_LEVEL LESS_EQUAL OC_CMAKE_DEBUG_LEVEL)
      if(WIN32)
	set(_OC_DEBUG_MESSAGE "OpenCMISS DEBUG: ")
      else()
	set(_OC_DEBUG_MESSAGE "${_OC_COLOUR_BOLD_MAGENTA}OpenCMISS DEBUG:${_OC_COLOUR_RESET} ")
      endif()
      string(APPEND _OC_DEBUG_MESSAGE ${DEBUG_MESSAGE})
      if(CMAKE_DEBUG)
        message(DEBUG ${_OC_DEBUG_MESSAGE})
      else()
        message(STATUS ${_OC_DEBUG_MESSAGE})
      endif()
      unset(_OC_DEBUG_MESSAGE)
  #  endif()
  #endif()
endfunction()

macro(OCCMakeClearModulePath)
  # Remove all paths resolving to this one here so that recursive calls will not search here again
  set(_ORIGINAL_CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}")
  unset(CMAKE_MODULE_PATH)
  #get_filename_component(_THIS_DIRECTORY ${CMAKE_CURRENT_LIST_FILE} DIRECTORY)
  #foreach(_ENTRY "${_ORIGINAL_CMAKE_MODULE_PATH}")
  #  get_filename_component(_ENTRY_ABSOLUTE "${_ENTRY}" ABSOLUTE)
  #  if("${_ENTRY_ABSOLUTE}" STREQUAL "${_THIS_DIRECTORY}")
  #    list(REMOVE_ITEM CMAKE_MODULE_PATH "${_ENTRY}")
  #  endif()
  #endforeach()
  #unset(_THIS_DIRECTORY)
  #unset(_ENTRY_ABSOLUTE)
endmacro()

macro(OCCMakeResetModulePath)
  # Restore the current module path
  # This needs to be done BEFORE any calls in CONFIG find mode - if the found config has our
  # xxx-config-dependencies, which in turn might be allowed as system lookup, the FindModuleWrapper dir
  # is missing and stuff breaks. Took a while to figure out the problem as you might guess ;-)
  # Scenario discovered on Michael Sprenger's Ubuntu 10 system with 
  # OC_SYSTEM_ZLIB=YES and found, OC_SYSTEM_LIBXML2=ON but not found. This broke the CELLML-build as
  # the wrapper call for LIBXML removed the wrapper dir from the module path, then found libxml2 in config mode,
  # which in turn called find_dependency(ZLIB), which used the native FindZLIB instead of the wrapper first.
  # This problem only was detected because the native zlib library is called "(lib)z", but we link against the 
  # "zlib" target, which is either provided by our own build or by the wrapper that creates it. 
  set(CMAKE_MODULE_PATH "${_ORIGINAL_CMAKE_MODULE_PATH}")
  unset(_ORIGINAL_CMAKE_MODULE_PATH)
endmacro()

function(OCToAbsolutePaths CMLIST)
  set(_RESULT )
  foreach(_ENTRY ${${CMLIST}})
    cmake_path(GET "${_ENTRY}" ROOT_PATH _ENTRY_PATH)
    cmake_path(ABSOLUTE_PATH "${_ENTRY_PATH}" OUTPUT_VARIABLE _ENTRY_ABSOLUTE_PATH)
    list(APPEND _RESULT "${_ENTRY_ABSOLUTE_PATH}")
  endforeach()
  set(${CMLIST} ${_RESULT} PARENT_SCOPE)
endfunction()

function(OCCMakeFoundTargetPropertiesToVariables CMTARGET CMBASEVARIABLE)
  #message(STATUS "CMTARGET = ${CMTARGET}")
  #message(STATUS "CMBASEVARIABLE = ${CMBASEVARIABLE}")
  math(EXPR _NUMBER_PROPERTIES "${ARGC}-2")
  #message(STATUS "_NUMBER_PROPERTIES = ${_NUMBER_PROPERTIES}")
  if(_NUMBER_PROPERTIES GREATER 0)
    foreach(_PROPERTY_IDX RANGE 1 "${_NUMBER_PROPERTIES}")
      math(EXPR _ARGUMENT_NUMBER "${_PROPERTY_IDX}+1")
      set(_PROPERTY_NAME "${ARGV${_ARGUMENT_NUMBER}}")
      #message(STATUS "_PROPERTY_IDX : ${_PROPERTY_IDX}")
      #message(STATUS "  _ARGUMENT_NUMBER = ${_ARGUMENT_NUMBER}")
      #message(STATUS "  _PROPERTY_NAME = ${_PROPERTY_NAME}")
      if(_PROPERTY_NAME STREQUAL "IMPORTED_LOCATIONS")
	#message(STATUS "    PROCESSING IMPORTED LOCATIONS...")
	get_property(_HAVE_MULTICONFIG_ENV GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
	if(_HAVE_MULTICONFIG_ENV)
	  string(TOUPPER $<CONFIG> _UPPER_CONFIG_TYPE)
	else()
	  string(TOUPPER ${CMAKE_BUILD_TYPE} _UPPER_CONFIG_TYPE)
	endif()
	get_target_property(_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS ${CMTARGET} IMPORTED_CONFIGURATIONS)
	string(FIND "${_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS}" "NOTFOUND" _IMPORTED_CONFIGURATIONS_NOT_FOUND)
 	#message(STATUS "_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS = ${_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS}")
 	#message(STATUS "_IMPORTED_CONFIGURATIONS_NOT_FOUND = ${_IMPORTED_CONFIGURATIONS_NOT_FOUND}")
	if(${_IMPORTED_CONFIGURATIONS_NOT_FOUND} EQUAL -1)
	  # Target has an imported configurations property
 	  #message(STATUS "_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS = ${_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS}")
	  set(${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS ${_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS} PARENT_SCOPE)
	  list(LENGTH _${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS _CONFIG_LIST_LENGTH)
	  if(${_CONFIG_LIST_LENGTH} GREATER 0)
	    list(FIND _${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS "${_UPPER_CONFIG_TYPE}" _CONFIG_FOUND)
	    if(${_CONFIG_FOUND} EQUAL -1)
	      list(GET _${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS 0 _USE_CONFIG_TYPE)
	      OCCMakeWarning("Current configuration of '${_UPPER_CONFIG_TYPE}' is not available. Using a configuration of '${_USE_CONFIG_TYPE}'")
	    else()
	      set(_USE_CONFIG_TYPE "${_UPPER_CONFIG_TYPE}")
	    endif()
	    foreach(config ${_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS})
	      get_target_property(_${CMBASEVARIABLE}_LIBRARY_${config} ${CMTARGET} IMPORTED_LOCATION_${config})
	      list(REMOVE_DUPLICATES _${CMBASEVARIABLE}_LIBRARY_${config})
	      set(${CMBASEVARIABLE}_LIBRARY_${config} ${_${CMBASEVARIABLE}_LIBRARY_${config}} PARENT_SCOPE)
	    endforeach()
	    set(${CMBASEVARIABLE}_LIBRARIES ${_${CMBASEVARIABLE}_LIBRARY_${_USE_CONFIG_TYPE}} PARENT_SCOPE)
	    foreach(config ${_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS})
	      unset(_${CMBASEVARIABLE}_LIBRARY_${config})
	    endforeach()
	    unset(_USE_CONFIG_TYPE)
	    unset(_CONFIG_FOUND)
	  else()
	    OCCMakeWarning("No configurations were imported.")
	  endif()
	  unset(_CONFIG_LIST_LENGTH)
	else()
	  # Target does not have imported configurations clear the libraries variable
	  set(${CMBASEVARIABLE}_LIBRARIES "" PARENT_SCOPE)
	endif()
	unset(_IMPORTED_CONFIGURATIONS_NOT_FOUND)
	unset(_${CMBASEVARIABLE}_IMPORTED_CONFIGURATIONS)
	unset(_UPPER_CONFIG_TYPE)
	unset(_HAVE_MULTICONFIG_ENV)
      elseif(_PROPERTY_NAME STREQUAL "INTERFACE_LINK_LIBRARIES")
	#message(STATUS "    PROCESSING INTERFACE LINK LIBRARIES...")
	get_target_property(_${CMBASEVARIABLE}_LINK_LIBRARIES ${CMTARGET} INTERFACE_LINK_LIBRARIES)
	list(REMOVE_DUPLICATES _${CMBASEVARIABLE}_LINK_LIBRARIES)
	set(${CMBASEVARIABLE}_LINK_LIBRARIES "${_${CMBASEVARIABLE}_LINK_LIBRARIES}" PARENT_SCOPE)
	unset(_${CMBASEVARIABLE}_LINK_LIBRARIES)
      elseif(_PROPERTY_NAME STREQUAL "INTERFACE_LINK_OPTIONS")
	#message(STATUS "    PROCESSING INTERFACE LINK OPTIONS...")
	get_target_property(_${CMBASEVARIABLE}_LINK_OPTIONS ${CMTARGET} INTERFACE_LINK_OPTIONS)
	list(REMOVE_DUPLICATES _${CMBASEVARIABLE}_LINK_OPTIONS)
	set(${CMBASEVARIABLE}_LINK_OPTIONS "${_${CMBASEVARIABLE}_LINK_OPTIONS}" PARENT_SCOPE)
	unset(_${CMBASEVARIABLE}_LINK_OPTIONS)
      elseif(_PROPERTY_NAME STREQUAL "INTERFACE_INCLUDE_DIRECTORIES")
	#message(STATUS "    PROCESSING INTERFACE INCLUDE DIRECTORIES...")
	get_target_property(_${CMBASEVARIABLE}_INCLUDE_DIRS ${CMTARGET} INTERFACE_INCLUDE_DIRECTORIES)
	list(REMOVE_DUPLICATES _${CMBASEVARIABLE}_INCLUDE_DIRS)
	set(${CMBASEVARIABLE}_INCLUDE_DIRS "${_${CMBASEVARIABLE}_INCLUDE_DIRS}" PARENT_SCOPE)
	unset(_${CMBASEVARIABLE}_INCLUDE_DIRS)
      elseif(_PROPERTY_NAME STREQUAL "INTERFACE_COMPILE_DEFINITIONS")
	#message(STATUS "    PROCESSING INTERFACE COMPILE DEFINITIONS...")
	get_target_property(_${CMBASEVARIABLE}_COMPILE_DEFINITIONS ${CMTARGET} INTERFACE_COMPILE_DEFINITIONS)
	list(REMOVE_DUPLICATES _${CMBASEVARIABLE}_COMPILE_DEFINITIONS)
	set(${CMBASEVARIABLE}_COMPILE_DEFINITIONS "${_${CMBASEVARIABLE}_COMPILE_DEFINITIONS}" PARENT_SCOPE)
	unset(_${CMBASEVARIABLE}_COMPILE_DEFINITIONS)
       elseif(_PROPERTY_NAME STREQUAL "INTERFACE_COMPILE_FEATURES")
	#message(STATUS "    PROCESSING INTERFACE COMPILE FEATURES...")
	get_target_property(_${CMBASEVARIABLE}_COMPILE_DEFINITIONS ${CMTARGET} INTERFACE_COMPILE_FEATURES)
	list(REMOVE_DUPLICATES _${CMBASEVARIABLE}_COMPILE_FEATURES)
	set(${CMBASEVARIABLE}_COMPILE_FEATURES "${_${CMBASEVARIABLE}_COMPILE_FEATURES}" PARENT_SCOPE)
	unset(_${CMBASEVARIABLE}_COMPILE_FEATURES)
       elseif(_PROPERTY_NAME STREQUAL "INTERFACE_COMPILE_OPTIONS")
	#message(STATUS "    PROCESSING INTERFACE COMPILE OPTIONS...")
	get_target_property(_${CMBASEVARIABLE}_COMPILE_OPTIONS ${CMTARGET} INTERFACE_COMPILE_OPTIONS)
	list(REMOVE_DUPLICATES _${CMBASEVARIABLE}_COMPILE_OPTIONS)
	set(${CMBASEVARIABLE}_COMPILE_OPTIONS "${_${CMBASEVARIABLE}_COMPILE_OPTIONS}" PARENT_SCOPE)
	unset(_${CMBASEVARIABLE}_COMPILE_OPTIONS)
      else()
	OCCMakeWarning("Specified property of '${_PROPERTY_NAME}' is unknown or invalid.")
      endif()
      unset(_PROPERTY_NAME)
      unset(_ARGUMENT_NUMBER)
    endforeach()
  else()
    OCCMakeWarning("No properties specified for OCCMakeFoundTargetPropertiesToVariables.")
  endif()
  unset(_NUMBER_PROPERTIES)
endfunction()
